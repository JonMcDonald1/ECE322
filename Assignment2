#ifndef DECK_H
#define DECK_H

#include <stdlib.h>
//#include "player.h"
#include "card.h"
#include <stdio.h>
#include <time.h>
/*
 * Structure: deck
 * ---------------
 *  An array of 52 cards.
 */
struct deck {
  struct card list[52]; 
  int top_card;
};

//https://github.com/JonMcDonald1/ECE322/tree/master

/* 
 * Variable: deck_instance
 * -----------------------
 *
 * Go Fish uses a single deck
 */
struct deck deck_instance;  // this is deck_instance of type deck
/*
 * Function: shuffle
 * --------------------
 *  Initializes deck_instance and shuffles it.
 *  Resets the deck if a prior game has been played.
 * 
 *  returns: 0 if no error, and non-zero on error

takes in the array deck_instance and the length of the card list
 */

int shuffle(){
char R[13]={'A','2','3','4','5','6','7','8','9','1','J','Q','K'};//ranks
char S[4]={'C','D','H','S'};	//suit		     						
//need to append all R to each S so "CA","C2","C3"....[0],[1],[2]
int element=0; // keeps track of elements in list

for (int i=0;i<4;i++){// all 4 suits
	for (int j=0;j<13;j++) {// all 13 ranks
// if the number 10 is drawn, it is represented as a 1 and 0 is appended	
//struct rank[2] is 2 char long so [0] and [1] can be used		
		deck_instance.list[element].suit=S[i]; // struct suite is 1 char
	if (R[j]=='1'){
// creates '10' kinda like deck_instance.list[counter].rank="10";
			deck_instance.list[element].rank[0]='1';
			deck_instance.list[element].rank[1]='0';        }
		
		if (R[j]!='1'){
			deck_instance.list[element].rank[0]=R[j];   //only 1 element used  
		  	deck_instance.list[element].rank[1]='\0';	} //may need this line

// chars use %c and \n is new line
printf("%c%c%c \n",deck_instance.list[element].suit,deck_instance.list[element].rank[0],deck_instance.list[element].rank[1]);
	element++;
}}
// end creating the deck

// %p is the pointer address so these are the pointer locations
//				printf("%p \n",deck_instance.list[0] );
// pointer prints 'nil' when out bounds
//				  printf("%p \n",deck_instance.list[53] ); 

// need to now shuffle the deck
int length= sizeof deck_instance.list / sizeof deck_instance.list[0]; 
//printf("deck length:%d \n",length); // 52

for (int i=0;i<length;i++){
	srand ( time(NULL) );	// this creates the seed to randomize
	int randomElement=rand()%(52-i); //will swap every element with another element at least once, so position [0],..[52] will get swapped with some other element once  random 

struct card temp={"","",""}; // deck_instance is 3 char long so make 3 blank
temp = deck_instance.list[i];
deck_instance.list[i] = deck_instance.list[randomElement];
deck_instance.list[randomElement]=temp;
}

// prints out new shuffled deck
//for (int i=0;i<length;i++){
//	printf("%c%c%c \n",deck_instance.list[i].suit,deck_instance.list[i].rank[0],deck_instance.list[i].rank[1]); }

deck_instance.top_card=52;// set to use for to count
printf("deck instance length: %d \n",deck_instance.top_card);


printf("Shuffling deck... \n \n");
return 0; // 0 returned when it runs all the way thru
}

/////////////////////////////////////////////////////////////////////////////

struct player {
  struct hand* card_list;
  char book[7];
  size_t hand_size;
};

/* 
 * Instance Variables: user, computer
 * ----------------------------------
 *
 *  We only support 2 users: a human and a computer
 */
struct player user;
struct player computer;


// target is a pointer to the player and new-card is a pointer to the topcard
int add_card(struct player* target, struct card* new_card){
//create node new_card and add this node to the end of the players deck which is a linked list of nodes

if (target == NULL)
{				//fail case
printf("unable to allocate memory for target \n");
	return -1;
}
if (new_card == NULL)
{				//fail case
printf("unable to allocate memory for new_card \n");
	return -1;
}
printf("answer1: %c%c \n ",(*new_card).suit ,(*new_card).rank[0]   );
printf("answer2: %c%c \n ",  new_card->suit ,  new_card->rank[0]   );

// card list is pointer to head of linked list
// looking at this players deck

// current is the pointer in the hand and player is the pointer to which players deck is being used tom add to

//(pointer name)-->(variable name)
struct hand* player_deck=target->card_list;//location of players deck
// new_item is like the head node
struct hand* new_item=NULL; //used to create the node of the card being added
new_item  = (struct hand*)malloc(sizeof(struct hand));
if (new_item == NULL)
{				//fail case
printf("unable to allocate memory for new_item \n");
	return -1;
}

//creates new_item node BASED ON HAND, WHICH HAS TOP AND NEXT
new_item->top = *new_card;// sets the argument new card to a node
new_item->next= NULL;

//traverse the player_deck until there does not exist a head keep on setting the head of the player deck to the next
// when the players deck if empty at the start of the gae, set the new_card to the top

//traverse til the end of the deck, keep on changing the next location
while (target->card_list != NULL ){	
	printf("updated player deck %s \n",target->card_list);	
	target->card_list = target->card_list->next;
		
} 
// for first time adding a card, it will be the first entry, skips while loop
if (target->card_list==NULL){
	//sets current head of the player deck to the new card data
	target->card_list = new_item;
	
	target->hand_size = target->hand_size+1; // adds to hand
}

// After top card put in hand, decrease the number of cards with top_card
//printf("deck instance length:%d \n",deck_instance.top_card);
printf("player hand size: %d \n",target->hand_size);
deck_instance.top_card=deck_instance.top_card -1;
}


/////////////////////////////////////////////////////////////////////////////

//int shuffle();

/*
 * Function: deal_player_cards
 * ---------------------------
 *  Deal 7 random cards to the player specified in the function.
 *  Remove the dealt cards from the deck. 
 *
 *  target: pointer to the player to be dealt cards
 *
 *  returns: 0 if no error, and non-zero on error
 */

/// since it is now shuffled, take the top 7 cards and give them to a user

//int deal_player_cards(struct player* target){
	
//	for(int i=1;i<=7;i++){
//				add_card(target);
		//printf("total cards dealt: %d \n",i);
//	}
//}




/*
 * Function: next_card
 * -------------------
 *  Return a pointer to the top card on the deck.
 *  Removes that card from the deck. 
 *
 *  returns: pointer to the top card on the deck.
 */
struct card* next_card( );

/*
 * Function: size
 * --------------
 *  Return the number of cards left in the current deck.
 *
 *  returns: number of cards left in the deck.
 */
size_t deck_size( );

//get the user deck size and the computer deck size and then do 52-(both) is the deck size left over.


#endif
